AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation Template for Demo. Browse to port 8080 for application
  demo. LAMP stack also installed
Parameters:
  KeyName:
    Default: demokey
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters.
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
  DBUsername:
    Default: demokey
    NoEcho: 'true'
    Description: User name for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
  DBPassword:
    Default: demokey
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
  DBRootPassword:
    Default: demokey
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-50842d38
      HVM64: ami-08842d60
      HVMG2: ami-3a329952
    us-west-2:
      PV64: ami-af86c69f
      HVM64: ami-8786c6b7
      HVMG2: ami-47296a77
    us-west-1:
      PV64: ami-c7a8a182
      HVM64: ami-cfa8a18a
      HVMG2: ami-331b1376
    eu-west-1:
      PV64: ami-aa8f28dd
      HVM64: ami-748e2903
      HVMG2: ami-00913777
    ap-southeast-1:
      PV64: ami-20e1c572
      HVM64: ami-d6e1c584
      HVMG2: ami-fabe9aa8
    ap-northeast-1:
      PV64: ami-21072820
      HVM64: ami-35072834
      HVMG2: ami-5dd1ff5c
    ap-southeast-2:
      PV64: ami-8b4724b1
      HVM64: ami-fd4724c7
      HVMG2: ami-e98ae9d3
    sa-east-1:
      PV64: ami-9d6cc680
      HVM64: ami-956cc688
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-a857c591
      HVM64: ami-ac57c595
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-a03503bd
      HVM64: ami-b43503a9
      HVMG2: ami-b03503ad
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          packages:
            yum:
              mysql: []
              mysql-server: []
              mysql-libs: []
              httpd: []
              php: []
              php-mysql: []
          files:
            /var/www/html/index.php:
              content:
                'Fn::Join':
                  - ''
                  - - |
                      <html>
                    - |2
                        <head>
                    - |2
                          <title>AWS CloudFormation PHP Sample</title>
                    - |2
                          <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                    - |2
                        </head>
                    - |2
                        <body>
                    - |2
                          <h1>Welcome to the AWS CloudFormation Ultima demo, browse to port 8080 for app</h1>
                    - |2
                          <p/>
                    - |2
                          <?php
                    - |2
                            // Print out the current data and time
                    - |2
                            print "The Current Date and Time is: <br/>";
                    - |2
                            print date("g:i A l, F j Y.");
                    - |2
                          ?>
                    - |2
                          <p/>
                    - |2
                          <?php
                    - |2
                            // Setup a handle for CURL
                    - |2
                            $curl_handle=curl_init();
                    - |2
                            curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                    - |2
                            curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                    - |2
                            // Get the hostname of the intance from the instance metadata
                    - |2
                            curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                    - |2
                            $hostname = curl_exec($curl_handle);
                    - |2
                            if (empty($hostname))
                    - |2
                            {
                    - |2
                              print "Sorry, for some reason, we got no hostname back <br />";
                    - |2
                            }
                    - |2
                            else
                    - |2
                            {
                    - |2
                              print "Server = " . $hostname . "<br />";
                    - |2
                            }
                    - |2
                            // Get the instance-id of the intance from the instance metadata
                    - |2
                            curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                    - |2
                            $instanceid = curl_exec($curl_handle);
                    - |2
                            if (empty($instanceid))
                    - |2
                            {
                    - |2
                              print "Sorry, for some reason, we got no instance id back <br />";
                    - |2
                            }
                    - |2
                            else
                    - |2
                            {
                    - |2
                              print "EC2 instance-id = " . $instanceid . "<br />";
                    - |2
                            }
                    - '      $Database   = "'
                    - Ref: DBName
                    - |
                      ";
                    - '      $DBUser     = "'
                    - Ref: DBUsername
                    - |
                      ";
                    - '      $DBPassword = "'
                    - Ref: DBPassword
                    - |
                      ";
                    - |2
                            print "Database = " . $Database . "<br />";
                    - |2
                            $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
                    - |2
                                            or die("Could not connect: " . ysql_error());
                    - |2
                            print ("Connected to $Database successfully");
                    - |2
                            mysql_close($dbconnection);
                    - |2
                          ?>
                    - |2
                          <h2>PHP Information</h2>
                    - |2
                          <p/>
                    - |2
                          <?php
                    - |2
                            phpinfo();
                    - |2
                          ?>
                    - |2
                        </body>
                    - |
                      </html>
              mode: '000600'
              owner: apache
              group: apache
            /tmp/setup.mysql:
              content:
                'Fn::Join':
                  - ''
                  - - 'CREATE DATABASE '
                    - Ref: DBName
                    - |
                      ;
                    - 'GRANT ALL ON '
                    - Ref: DBName
                    - .* TO '
                    - Ref: DBUsername
                    - '''@localhost IDENTIFIED BY '''
                    - Ref: DBPassword
                    - |
                      ';
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content:
                'Fn::Join':
                  - ''
                  - - |
                      [main]
                    - stack=
                    - Ref: 'AWS::StackId'
                    - |+

                    - region=
                    - Ref: 'AWS::Region'
                    - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                'Fn::Join':
                  - ''
                  - - |
                      [cfn-auto-reloader-hook]
                    - |
                      triggers=post.update
                    - >
                      path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                    - 'action=/opt/aws/bin/cfn-init -v '
                    - '         --stack '
                    - Ref: 'AWS::StackName'
                    - '         --resource WebServerInstance '
                    - '         --configsets InstallAndRun '
                    - '         --region '
                    - Ref: 'AWS::Region'
                    - |+

                    - |
                      runas=root
          services:
            sysvinit:
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            01_set_mysql_root_password:
              command:
                'Fn::Join':
                  - ''
                  - - mysqladmin -u root password '
                    - Ref: DBRootPassword
                    - ''''
              test:
                'Fn::Join':
                  - ''
                  - - '$(mysql '
                    - Ref: DBUsername
                    - ' -u root --password='''
                    - Ref: DBRootPassword
                    - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command:
                'Fn::Join':
                  - ''
                  - - mysql -u root --password='
                    - Ref: DBRootPassword
                    - ''' < /tmp/setup.mysql'
              test:
                'Fn::Join':
                  - ''
                  - - '$(mysql '
                    - Ref: DBUsername
                    - ' -u root --password='''
                    - Ref: DBRootPassword
                    - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
    Properties:
      ImageId:
        'Fn::FindInMap':
          - AWSRegionArch2AMI
          - Ref: 'AWS::Region'
          - 'Fn::FindInMap':
              - AWSInstanceType2Arch
              - Ref: InstanceType
              - Arch
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      KeyName:
        Ref: KeyName
      Tags:
        - Key: Name
          Value: DemoUltima
      UserData:
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                curl -sSL https://get.docker.com | sh
              - |
                service docker start
              - |
                docker run -d -p 8080:8080 rehma017/polymerjs
              - |
                yum install -y aws-cfn-bootstrap
              - |
                # Install the files and packages from the metadata
              - '/opt/aws/bin/cfn-init -v '
              - '         --stack '
              - Ref: 'AWS::StackName'
              - '         --resource WebServerInstance '
              - '         --configsets InstallAndRun '
              - '         --region '
              - Ref: 'AWS::Region'
              - |+

              - |
                # Signal the status from cfn-init
              - '/opt/aws/bin/cfn-signal -e $? '
              - '         --stack '
              - Ref: 'AWS::StackName'
              - '         --resource WebServerInstance '
              - '         --region '
              - Ref: 'AWS::Region'
              - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHLocation
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - WebServerInstance
              - PublicDnsName
